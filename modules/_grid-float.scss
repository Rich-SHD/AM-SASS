// Define column count & width
$am-strap-columns: 12 !default;
$ams-column-width: (100% / $am-strap-columns);

// Create block elements
[am-container],
[am-row],
[am-col] {
  display: block;
}

// Clear column floats
[am-row]::after {
  display: table;
  content: "";
  clear: both;
}

// Prevent column collapse
[am-col] {
  min-height: 1px;
}

// Grid rules mixin
@mixin grid-rules($ams-breakpoint-key, $ams-breakpoint-map) {
  @for $ams-i from 0 through ($am-strap-columns - 1) {
    [am-col~="#{$ams-breakpoint-key}-#{$ams-i + 1}"] {
      float: left;
      width: ($ams-column-width * ($ams-i + 1));
    }

    [am-push~="#{$ams-breakpoint-key}-#{$ams-i}"] {
      position: relative;
      left: ($ams-column-width * $ams-i);
    }

    [am-pull~="#{$ams-breakpoint-key}-#{$ams-i}"] {
      position: relative;
      right: ($ams-column-width * $ams-i);
    }

    [am-offset~="#{$ams-breakpoint-key}-#{$ams-i}"] {
      margin-left: ($ams-column-width * $ams-i);
    }
  }
}

// Loop breakpoints & apply grid rules
@each $ams-breakpoint-key, $ams-breakpoint-map in $am-strap {

  // Limit container width & center horizontally
  @if (map-get($ams-breakpoint-map, "container-max-width") == true) {
    @media #{map-get($ams-target-breakpoint, $ams-breakpoint-key)} {
      [am-container] {
        max-width: map-get($ams-breakpoint-map, "breakpoint");
        margin-left: auto;
        margin-right: auto;
      }
    }
  }

  // Mobile first grid rules
  @if ($ams-breakpoint-key == "xs") {
    @include grid-rules($ams-breakpoint-key, $ams-breakpoint-map);
  } @else {
    @media only screen and (min-width: #{map-get($ams-breakpoint-map, "breakpoint")}) {
      @include grid-rules($ams-breakpoint-key, $ams-breakpoint-map);
    }
  }
}