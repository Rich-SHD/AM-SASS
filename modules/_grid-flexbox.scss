// Flexbox grid rules
@mixin ams-flexbox($ams-breakpoint-key, $ams-breakpoint-map, $ams-column-width) {
  @for $ams-i from 0 through (map-get($am-strap, "columns") - 1) {
    [data-am-col~="#{$ams-breakpoint-key}-#{$ams-i + 1}"],
    [am-col~="#{$ams-breakpoint-key}-#{$ams-i + 1}"] {
      -webkit-box-flex: 0;
      -webkit-flex: 0 0 ($ams-column-width * ($ams-i + 1));
      -ms-flex: 0 0 ($ams-column-width * ($ams-i + 1));
      flex: 0 0 ($ams-column-width * ($ams-i + 1));
      max-width: ($ams-column-width * ($ams-i + 1));
    }

    [data-am-push~="#{$ams-breakpoint-key}-#{$ams-i}"],
    [am-push~="#{$ams-breakpoint-key}-#{$ams-i}"] {
      position: relative;
      left: ($ams-column-width * $ams-i);
    }

    [data-am-pull~="#{$ams-breakpoint-key}-#{$ams-i}"],
    [am-pull~="#{$ams-breakpoint-key}-#{$ams-i}"] {
      position: relative;
      right: ($ams-column-width * $ams-i);
    }

    [data-am-offset~="#{$ams-breakpoint-key}-#{$ams-i}"],
    [am-offset~="#{$ams-breakpoint-key}-#{$ams-i}"] {
      margin-left: ($ams-column-width * $ams-i);
    }
  }
}

// Check if grid type is flex
@if (map-get($am-strap, "grid-type") == "flexbox") {

  // Center container
  [data-am-container],
  [am-container] {
    margin-left: auto;
    margin-right: auto;
  }

  // Flex row
  [data-am-row],
  [am-row] {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
  }

  [data-am-col],
  [am-col] {
    width: 100%;
  }

  // Extract breakpoints from config map
  $ams-breakpoints: map-get($am-strap, "breakpoints");

  // Calculate column width
  $ams-column-width: (100% / map-get($am-strap, "columns"));

  // Limit container width & center horizontally
  @each $ams-breakpoint-key, $ams-breakpoint-map in $ams-breakpoints {
    @if (map-get($ams-breakpoint-map, "container-max-width") == true) {
      @media #{map-get($ams-target-breakpoint, $ams-breakpoint-key)} {
        [data-am-container],
        [am-container] {
          max-width: map-get($ams-breakpoint-map, "breakpoint");
        }
      }
    }
  }

  // Apply mobile first grid rules
  @each $ams-breakpoint-key, $ams-breakpoint-map in $ams-breakpoints {
    @if ($ams-breakpoint-key == "xs") {
      @include ams-flexbox($ams-breakpoint-key, $ams-breakpoint-map, $ams-column-width);
    } @else {
      @media only screen and (min-width: #{map-get($ams-breakpoint-map, "breakpoint")}) {
        @include ams-flexbox($ams-breakpoint-key, $ams-breakpoint-map, $ams-column-width);
      }
    }
  }

  // Fluid container width
  [data-am-container~="fluid"],
  [am-container~="fluid"] {
    max-width: none;
  }
}