// Grid padding rules
@mixin ams-padding($ams-breakpoint-key) {

  // Extract breakpoints from config map
  $ams-breakpoints: map-get($am-strap, "breakpoints");

  // Assign breakpoint map to local variable
  $ams-breakpoint-map: map-get($ams-breakpoints, $ams-breakpoint-key);

  // Horizontal padding & max-width on container
  [am-container] {
    padding-left: map-get($ams-breakpoint-map, "container-padding");
    padding-right: map-get($ams-breakpoint-map, "container-padding");
  }

  // Negative horizontal margin on row
  [am-row] {
    margin-left: -#{map-get($ams-breakpoint-map, "column-padding")};
    margin-right: -#{map-get($ams-breakpoint-map, "column-padding")};
  }

  // Horizontal padding on column
  [am-col] {
    padding-left: map-get($ams-breakpoint-map, "column-padding");
    padding-right: map-get($ams-breakpoint-map, "column-padding");
  }

  // Compress column padding
  [am-row~="compress-#{$ams-breakpoint-key}"] {
    margin-left: 0;
    margin-right: 0;

    & > [am-col] {
      padding-left: 0;
      padding-right: 0;
    }
  }
}

// Loop breakpoints & apply grid padding
@each $ams-breakpoint-key, $ams-breakpoint-query in $ams-target-breakpoint {
  @media #{$ams-breakpoint-query} {
    @include ams-padding($ams-breakpoint-key);
  }
}

// Contain padding in grid elements
[am-container],
[am-row],
[am-col] {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

// Compress column padding at all breakpoints
[am-row~="compress"] {
  margin-left: 0;
  margin-right: 0;

  & > [am-col] {
    padding-left: 0;
    padding-right: 0;
  }
}